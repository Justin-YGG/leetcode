===============
841. 钥匙和房间
===============

https://leetcode-cn.com/problems/keys-and-rooms/

有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。

在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。

最初，除 0 号房间外的其余所有房间都被锁住。

你可以自由地在房间之间来回走动。

如果能进入每个房间返回 true，否则返回 false。

- 示例1：

::

    输入: [[1],[2],[3],[]]
    输出: true
    解释: 我们从 0 号房间开始，拿到钥匙 1。
    之后我们去 1 号房间，拿到钥匙 2。
    然后我们去 2 号房间，拿到钥匙 3。
    最后我们去了 3 号房间。
    由于我们能够进入每个房间，我们返回 true。

- 示例2：

::

    输入: [[1,3],[3,0,1],[2],[0]]
    输出: false
    解释: 我们不能进入 2 号房间。
	
.. note::

    1. 1 <= rooms.length <= 1000
    2. 0 <= rooms[i].length <= 1000
    3. 所有房间中的钥匙数量总计不超过 3000。

- 分析

简单的搜索问题，可以用深度优先搜索或者广度优先搜索解决。从0号房间开始，标记此房间为已访问，并且访问计数count加一，然后获取房间内的钥匙，依次遍历钥匙所指代的房间，最后判断访问计数是否等于房间总数即可。

- 代码

.. code-block:: c++

    class Solution {
    public:
        void dfs(vector<vector<int>>& rooms, int cur, vector<bool>& visit, int& count){
            if(!visit[cur]){
                visit[cur]=true; //标记当前房间为已进入
                count++; //进入的房间数加一
                for(int i=0;i<rooms[cur].size();i++) //遍历钥匙房间
                    dfs(rooms,rooms[cur][i],visit,count);
            }
        }
        bool canVisitAllRooms(vector<vector<int>>& rooms) {
            int len=rooms.size();
            if(len<2) return true;
            vector<bool> visit(len,false);
            int count=0;
            dfs(rooms,0,visit,count);
            return count==len; //判断是否全部进入
        }
    };
