============================
面试题09. 用两个栈实现队列
============================

https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/

用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )

**示例 1**::

    输入：
    ["CQueue","appendTail","deleteHead","deleteHead"]
    [[],[3],[],[]]

    输出：[null,null,3,-1]

**示例 2**::

    输入：
    ["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
    [[],[],[5],[2],[],[]]

    输出：[null,-1,null,null,5,2]

**提示**::

    1 <= values <= 10000

    最多会对 appendTail、deleteHead 进行 10000 次调用

---------------------------------------------

.. tip::

    双栈可实现列表倒序:

    设有含三个元素的栈 A = [1,2,3] 和空栈 B = []。若循环执行 A 元素出栈并添加入栈 B ，直到栈 A 为空，则 A = [] , B = [3,2,1] ，即 栈 B 元素实现栈 A 元素倒序

.. note::

    由于问题特殊，以下分析仅满足添加 NN 个元素并删除 NN 个元素，即栈初始和结束状态下都为空的情况:

    - 时间复杂度：appendTail 为 O(1)，deleteHead 为 O(N)
    - 空间复杂度：appendTail 为 O(N)，deleteHead 为 O(N)，最差情况下，栈 A 和 B 共保存 NN 个元素

.. code:: python

    class CQueue(object):

        def __init__(self):
            self.A = []
            self.B = []


        def appendTail(self, value):
            """
            :type value: int
            :rtype: None
            """
            self.A.append(value)


        def deleteHead(self):
            """
            :rtype: int
            """
            # B 中有元素，直接弹出即为栈顶元素
            if self.B:
                return self.B.pop()
            # A B 都为空，说明没有元素
            if not self.A:
                return -1
            # 循环将 A 中元素插入 B，实现倒序，第一个元素即为栈底元素，也就是队列要出队的第一个元素
            while self.A:
                self.B.append(self.A.pop())
            return self.B.pop()


    # Your CQueue object will be instantiated and called as such:
    # obj = CQueue()
    # obj.appendTail(value)
    # param_2 = obj.deleteHead()

.. seealso::

    :ref:`implement-stack-using-queues`.